---
#
 - set_fact:
        package: "i3"
        config: ".config/i3"

#- name: Install Dependencies {{ package }}
#  yum:
#          name: "{{ item }}"
#  with_items:
#    - xinit
#    # i3gaps dependencies
#    - libxcb-devel
#    - xcb-util-keysyms-devel
#    - xcb-util-devel
#    - xcb-util-wm-devel
#    - xcb-util-xrm-devel
#    - yajl-devel
#    - libXrandr-devel
#    - startup-notification-devel
#    - libev-devel
#    - xcb-util-cursor-devel
#    - libXinerama-devel
#    - libxkbcommon-devel
#    - libxkbcommon-x11-devel
#    - pcre-devel
#    - pango-devel
#    - git
#    - gcc
#    - make
#    - automake
#    # i3lock dependencies
#    - pam-devel 
#  become: True
#
#- name: Checking Existing {{ config }}
#  stat: path={{ ansible_env.HOME }}/{{ config }}
#  register: file
#
#- name: Remove Old {{ config }}
#  file: path={{ file.stat.path }} state=absent force=yes
#  when: file.stat.exists == True
#
#- name: Linking {{ package }}
#  command: "/bin/ln -fs {{ playbook_dir }}/roles/setup/files/{{ config }} {{ ansible_env.HOME }}/{{ config }}"
#
#- name: Clone i3-Gaps From Git
#  git:
#    repo: 'https://www.github.com/Airblader/i3'
#    dest: "/tmp/i3gaps"
#
#- name: Config i3-Gaps Install
#  shell: "{{ item }}"
#  args:
#    chdir: "/tmp/i3gaps"
#  with_items:
#    - autoreconf --force --install
#    - rm -rf build/
#    - mkdir -p build
#  become: true
#  ignore_errors: true
#
#- name: Build i3-Gaps and Install
#  shell: "{{ item }}"
#  args:
#    chdir: "/tmp/i3gaps/build"
#  with_items:
#    - ../configure --prefix=/usr --sysconfdir=/etc --disable-sanitizers
#    - make
#    - make install
#  become: true
#  ignore_errors: true
#
#
  #- name: Clone i3lock From Git
  #  git:
  #    repo: 'https://github.com/Lixxia/i3lock'
  #    dest: "/tmp/i3lock"
  #
  #- name: Setup i3lock build
  #  shell: "{{ item }}"
  #  args:
  #    chdir: "/tmp/i3lock"
  #  with_items:
  #    - autoreconf -fi
  #    - mkdir -p build
  #  become: true
  #  ignore_errors: true
  #
  #- name: i3lock build and install
  #  shell: "{{ item }}"
  #  args:
  #    chdir: "/tmp/i3lock/build"
  #  with_items:
  #    - ../configure
  #    - make
  #    - make install
  #  become: true
  #  ignore_errors: true
  #
 - name: Create Lock Service
   copy: src={{ playbook_dir }}/roles/setup/files/configs/lock.service dest=/etc/systemd/system/lock.service 
   become: true
   register: service
 
 - name: Reload SystemD
   command: "{{ item }}"
   with_items:
           - systemctl daemon-reload
           - systemctl enable lock.service
   become: true
   when: service.changed
 
